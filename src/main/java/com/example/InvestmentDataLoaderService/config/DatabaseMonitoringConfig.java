package com.example.InvestmentDataLoaderService.config;

import com.zaxxer.hikari.HikariDataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * <p>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π HikariCP
 * –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ç–µ—á–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.</p>
 * 
 * @author InvestmentDataLoaderService
 * @version 1.0
 * @since 2024
 */
@Configuration
@EnableScheduling
public class DatabaseMonitoringConfig {

    @Autowired
    private DataSource dataSource;

    /**
     * Health indicator –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     */
    @Bean
    public HealthIndicator databaseConnectionPoolHealth() {
        return new HealthIndicator() {
            @Override
            public Health health() {
                try {
                    if (dataSource instanceof HikariDataSource) {
                        HikariDataSource hikariDataSource = (HikariDataSource) dataSource;
                        
                        int activeConnections = hikariDataSource.getHikariPoolMXBean().getActiveConnections();
                        int idleConnections = hikariDataSource.getHikariPoolMXBean().getIdleConnections();
                        int totalConnections = hikariDataSource.getHikariPoolMXBean().getTotalConnections();
                        int threadsAwaitingConnection = hikariDataSource.getHikariPoolMXBean().getThreadsAwaitingConnection();
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                        boolean hasLeaks = threadsAwaitingConnection > 5 || 
                                         (activeConnections > 0 && activeConnections == totalConnections);
                        
                        if (hasLeaks) {
                            return Health.down()
                                .withDetail("activeConnections", activeConnections)
                                .withDetail("idleConnections", idleConnections)
                                .withDetail("totalConnections", totalConnections)
                                .withDetail("threadsAwaitingConnection", threadsAwaitingConnection)
                                .withDetail("status", "Potential connection leak detected")
                                .build();
                        }
                        
                        return Health.up()
                            .withDetail("activeConnections", activeConnections)
                            .withDetail("idleConnections", idleConnections)
                            .withDetail("totalConnections", totalConnections)
                            .withDetail("threadsAwaitingConnection", threadsAwaitingConnection)
                            .withDetail("status", "Connection pool healthy")
                            .build();
                    }
                    
                    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ DataSource
                    try (Connection connection = dataSource.getConnection()) {
                        return Health.up()
                            .withDetail("status", "Database connection successful")
                            .build();
                    }
                    
                } catch (SQLException e) {
                    return Health.down()
                        .withDetail("error", e.getMessage())
                        .withDetail("status", "Database connection failed")
                        .build();
                }
            }
        };
    }

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç
    public void monitorConnectionPool() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikariDataSource = (HikariDataSource) dataSource;
            
            int activeConnections = hikariDataSource.getHikariPoolMXBean().getActiveConnections();
            int idleConnections = hikariDataSource.getHikariPoolMXBean().getIdleConnections();
            int totalConnections = hikariDataSource.getHikariPoolMXBean().getTotalConnections();
            int threadsAwaitingConnection = hikariDataSource.getHikariPoolMXBean().getThreadsAwaitingConnection();
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            System.out.println("=== –°–û–°–¢–û–Ø–ù–ò–ï –ü–£–õ–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===");
            System.out.println("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: " + activeConnections);
            System.out.println("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: " + idleConnections);
            System.out.println("–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: " + totalConnections);
            System.out.println("–ü–æ—Ç–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: " + threadsAwaitingConnection);
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö
            if (threadsAwaitingConnection > 5) {
                System.err.println("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (" + threadsAwaitingConnection + ")");
            }
            
            if (activeConnections > 0 && activeConnections == totalConnections) {
                System.err.println("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã, –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞");
            }
            
            if (activeConnections == 0 && idleConnections > 0) {
                System.out.println("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –Ω–æ—Ä–º–µ");
            }
            
            System.out.println("=================================");
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 1800000) // 30 –º–∏–Ω—É—Ç
    public void cleanupIdleConnections() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikariDataSource = (HikariDataSource) dataSource;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            hikariDataSource.getHikariPoolMXBean().softEvictConnections();
            
            System.out.println("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π");
        }
    }
}
