version: '3.8'

services:
  # Приложение Ingestion Service
  app:
    build: .
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=123password123
      - TINKOFF_API_TOKEN=${TINKOFF_API_TOKEN:-your_tinkoff_token_here}
      - JAVA_OPTS=-Xms512m -Xmx1g
    volumes:
      - ./logs:/var/log/ingestion-service
      - ./config:/app/config
    depends_on:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ingestion-network

  # База данных PostgreSQL
  db:
    image: postgres:15
    container_name: ingestion-postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123password123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ingestion-network

  # pgAdmin для управления базой данных (опционально)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ingestion-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@ingestion.local
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - ingestion-network
    profiles:
      - dev

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: ingestion-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ingestion-network
    profiles:
      - cache

  # Prometheus для мониторинга (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: ingestion-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ingestion-network
    profiles:
      - monitoring

  # Grafana для визуализации метрик (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: ingestion-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ingestion-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ingestion-network:
    driver: bridge